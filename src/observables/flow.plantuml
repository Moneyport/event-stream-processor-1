@startuml
autonumber
title Event Streaming Processor 
control "Event Sidecar" as ES

box Event Stream Processor actors #LavenderBlush
    participant "Extract Content" as EC
    participant "Span Collector" as SC
    participant "Trace Builder" as TB
    participant "Span sender" as SS
    participant "Trace Cache" as TC
end box
    ES -> EC: Event Trace Message
    Activate EC
    Activate TC
    note right of EC: {\n **spanContext**: {\n    traceId,\n    spanId,\n    service,\n    parentSpanId,\n    startTimestamp,\n    fnishTimestamp \n},\n **content**,\n **status**\n}
    EC -> SC: Extract spanContext, content and status
    Deactivate EC
    Activate SC
    alt Check Start Master Span Criteria Config && !parentSpanId\n OR parentSpanId and cache has no traceId entry. Should Cache.
        SC <- TC: get cache for traceId
        alt !parentSpanId ?
            SC -> SC: Create Trace Cache structure \nand add master span and parent span
            note right of SC: 
        else No
            SC <- TC: Get parentSpan
            SC -> SC: parentSpan.tags.errorCode ? newSpan.tags.errorCode = parentSpan.tags.errorCode\nparentSpan.tags.masterSpan ? newSpan.tags.masterSpan = parentSpan.tags.masterSpan\nExtend newSpan.tags = merge({ ...errorTags }, { tags: { ...tags, ...masterTags } })
            ESP -> TraceCache: create newSpan
            alt isLastSpan
                ESP <- TraceCache: get lastSpan = newSpan
                ESP -> ESP: trace[] = [lastSpan]
                loop while (lastSpan.parentSpanId)
                    ESP <- TraceCache: get last span parent
                    alt parentSpan?
                        ESP -> ESP: trace.unshift(parentSpan)\nlastSpan = parentSpan
                    else parentSpan not found
                        ...
                        ESP -> ESP: pause(timeout)
                    end
                end
                group Create Trace
                    ESP -> ESP: trace[masterSpan].finishTimestamp = trace[lastSpan].finishTimestamp
                    loop trace spans
                        ESP -> APM: send span
                    end
                    loop trace spans
                        ESP -> TraceCache: drop span
                    end
                end
            else No
                ESP -> ESP !!: exit
            end
        end
    else direct
    end
    
    deactivate ESP
@enduml